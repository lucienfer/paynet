name: Docker CI

on:
  push:
    branches: [ main, test-ci ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      explorer: ${{ steps.changes.outputs.explorer }}
      node: ${{ steps.changes.outputs.node }}
      signer: ${{ steps.changes.outputs.signer }}
      starknet-cashier: ${{ steps.changes.outputs.starknet-cashier }}
      starknet-setup: ${{ steps.changes.outputs.starknet-setup }}
      docker-compose: ${{ steps.changes.outputs.docker-compose }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            explorer:
              - 'dockerfiles/explorer.Dockerfile'
              - 'crates/**'
              - 'Cargo.toml'
              - 'rust-toolchain.toml'
            node:
              - 'dockerfiles/node.Dockerfile'
              - 'crates/**'
              - 'Cargo.toml'
              - 'rust-toolchain.toml'
            signer:
              - 'dockerfiles/signer.Dockerfile'
              - 'crates/**'
              - 'Cargo.toml'
              - 'rust-toolchain.toml'
            starknet-cashier:
              - 'dockerfiles/starknet-cashier.Dockerfile'
              - 'crates/**'
              - 'Cargo.toml'
              - 'rust-toolchain.toml'
            starknet-setup:
              - 'dockerfiles/starknet-setup.Dockerfile'
              - 'crates/**'
              - 'Cargo.toml'
              - 'rust-toolchain.toml'
            docker-compose:
              - 'docker-compose.yml'

  build:
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [explorer, node, signer, starknet-cashier, starknet-setup]
    steps:
      - name: Skip if no changes
        if: needs.detect-changes.outputs[matrix.service] != 'true'
        run: echo "No changes detected for ${{ matrix.service }}, skipping build"

      - uses: actions/checkout@v4
        if: needs.detect-changes.outputs[matrix.service] == 'true'

      - name: Set up Docker Buildx
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Build and push Docker image
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          dockerfile: ./dockerfiles/${{ matrix.service }}.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            CARGO_FEATURES=${{ matrix.service == 'node' && 'starknet' || '' }}

  test:
    needs: [detect-changes, build]
    runs-on: ubuntu-latest
    if: always() && (needs.detect-changes.outputs.docker-compose == 'true' || needs.build.result == 'success')
    strategy:
      matrix:
        include:
          - test_cmd: "cargo test -p node --no-default-features --features=mock,keyset-rotation,tls"
            cache_key: "node-mock-keyset-tls"
          - test_cmd: "cargo test -p node --no-default-features --features=starknet,keyset-rotation,tls"
            cache_key: "node-starknet-keyset-tls"
          - test_cmd: "cargo test -p signer --no-default-features"
            cache_key: "signer-default"
          - test_cmd: "cargo test -p cli-wallet --no-default-features"
            cache_key: "cli-wallet-default"
          - test_cmd: "cargo test -p cli-wallet --no-default-features --features=tls,tls-allow-self-signed"
            cache_key: "cli-wallet-tls"
          - test_cmd: "cargo test -p starknet-cashier --no-default-features"
            cache_key: "starknet-cashier-default"
          - test_cmd: "cargo test -p db-node --no-default-features"
            cache_key: "db-node-default"
          - test_cmd: "cargo test -p nuts --no-default-features"
            cache_key: "nuts-default"
          - test_cmd: "cargo test -p nuts --features=starknet,sqlx,nut19"
            cache_key: "nuts-starknet-sqlx-nut19"
          - test_cmd: "cargo test -p starknet-types --no-default-features"
            cache_key: "starknet-types-default"
          - test_cmd: "cargo test -p wallet --no-default-features"
            cache_key: "wallet-default"
          - test_cmd: "cargo test -p wallet --no-default-features --features=tls,tls-allow-self-signed"
            cache_key: "wallet-tls"
          - test_cmd: "cargo test -p liquidity-source --no-default-features"
            cache_key: "liquidity-source-default"
          - test_cmd: "cargo test -p liquidity-source --features=mock"
            cache_key: "liquidity-source-mock"
          - test_cmd: "cargo test -p starknet-on-chain-setup --no-default-features"
            cache_key: "starknet-on-chain-setup-default"
          - test_cmd: "cargo test -p starknet-payment-indexer --no-default-features"
            cache_key: "starknet-payment-indexer-default"
          - test_cmd: "cargo test -p starknet-liquidity-source --no-default-features"
            cache_key: "starknet-liquidity-source-default"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Update docker-compose with built images
        run: |
          # Replace local image names with registry images for built services
          if [[ "${{ needs.detect-changes.outputs.explorer }}" == "true" ]]; then
            sed -i "s|image: \"explorer\"|image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/explorer:${{ github.sha }}|g" docker-compose.yml
          fi
          if [[ "${{ needs.detect-changes.outputs.node }}" == "true" ]]; then
            sed -i "s|image: \"node\"|image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/node:${{ github.sha }}|g" docker-compose.yml
          fi
          if [[ "${{ needs.detect-changes.outputs.signer }}" == "true" ]]; then
            sed -i "s|image: \"signer\"|image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/signer:${{ github.sha }}|g" docker-compose.yml
          fi
          if [[ "${{ needs.detect-changes.outputs.starknet-cashier }}" == "true" ]]; then
            sed -i "s|image: \"starknet-cashier\"|image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/starknet-cashier:${{ github.sha }}|g" docker-compose.yml
          fi
          if [[ "${{ needs.detect-changes.outputs.starknet-setup }}" == "true" ]]; then
            sed -i "s|image: \"starknet-setup\"|image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/starknet-setup:${{ github.sha }}|g" docker-compose.yml
          fi

      - name: Start services
        run: |
          docker compose up -d
          docker compose ps

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          timeout 300 bash -c '
            until docker compose ps --format "table {{.Service}}\t{{.Status}}" | grep -E "(healthy|running)" | wc -l | grep -q "6"; do
              echo "Waiting for all services to be ready..."
              sleep 10
              docker compose ps
            done
          '

          - name: Remove unwanted files
          run: rm -f rust-toolchain.toml
          - uses: dtolnay/rust-toolchain@1.86.0
          - uses: Swatinem/rust-cache@v2
          with:
            shared-key: "rust-cache-${{ matrix.cache_key }}-${{ hashFiles('**/Cargo.lock') }}"
            cache-on-failure: true
          - uses: arduino/setup-protoc@v3
          with:
            version: "28.x"
          - name: Run test
          run: ${{ matrix.test_cmd }}

      - name: Show logs on failure
        if: failure()
        run: |
          echo "=== Docker compose logs ==="
          docker compose logs
          echo "=== Docker compose ps ==="
          docker compose ps

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v
          docker system prune -f
