name: Optimized CI

on:
  push:
    branches: [ main, test-ci ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug mode'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create config files
      run: |
        mkdir -p crates/bin/node/config
        echo '[node]' > crates/bin/node/config/docker.toml
    
    # Build avec cache
    - name: Build and cache Docker images
      run: |
        docker compose build --parallel
      env:
        DOCKER_BUILDKIT: 1
        COMPOSE_DOCKER_CLI_BUILD: 1
    
    # Démarrer seulement les services essentiels pour les tests
    - name: Start essential services
      run: |
        docker compose up -d db starknet-devnet
    
    - name: Wait for core services
      run: |
        timeout 120 bash -c '
          until docker compose exec -T db pg_isready; do sleep 2; done
          until curl -f http://localhost:5050/is_alive; do sleep 2; done
        '
    
    - name: Start remaining services
      run: |
        docker compose up -d
    
    - name: Wait for all services
      run: |
        timeout 180 bash -c '
          while [[ $(docker compose ps --services --filter "status=running" | wc -l) -lt $(docker compose config --services | wc -l) ]]; do
            echo "Waiting for services to start..."
            sleep 5
          done
        '
    
    - name: Health check
      run: |
        docker compose ps
        # Vérifier que les services sont accessibles
        curl -f http://localhost:5050/is_alive
        curl -f http://localhost:5173 || echo "Explorer might not be ready yet"
    
    - name: Run tests
      run: |
        # Remplacez par vos vrais tests
        echo "Running integration tests..."
        # docker compose exec -T node your-test-command
    
    - name: Show logs on failure
      if: failure()
      run: |
        docker compose logs --tail=100
    
    - name: Cleanup
      if: always()
      run: |
        docker compose down -v --remove-orphans
        docker system prune -f