name: Rust CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}
  CARGO_TERM_COLOR: always
  ROOT_KEY: tprv8ZgxMBicQKsPeb6rodrmEXb1zRucvxYJgTKDhqQkZtbz8eY4Pf2EgbsT2swBXnnbDPQChQeFrFqHN72yFxzKfFAVsHdPeRWq2xqyUT2c4wH
  SIGNER_GRPC_PORT: 10001
  NODE_GRPC_PORT: 20001
  # For node
  PG_URL: postgres://postgres:password@localhost:5432/node
  SIGNER_URL: http://localhost:10001

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Remove unwanted files
        run: rm -f rust-toolchain.toml
      - uses: dtolnay/rust-toolchain@1.86.0
        with:
          components: rustfmt, clippy
      - uses: arduino/setup-protoc@v3
        with:
          version: "28.x"
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "rust-cache-${{ hashFiles('**/Cargo.lock') }}"
          cache-on-failure: true
      - name: Check formatting
        run: cargo fmt --all -- --check
      - name: Run clippy
        run: cargo clippy -- -D warnings

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [explorer, node, signer, starknet-setup]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dockerfiles/${{ matrix.service }}.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,scope=${{ matrix.service }},mode=max
          build-args: |
            CARGO_FEATURES=${{ matrix.service == 'node' && 'starknet' || '' }}
        
  test:
    needs: [ build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "28.x"

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Update docker-compose with built images
        run: |
          sed -i "s|image: \"explorer\"|image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/explorer:${{ github.sha }}|g" docker-compose.app.yml
          sed -i "s|image: \"node\"|image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/node:${{ github.sha }}|g" docker-compose.app.yml
          sed -i "s|image: \"signer\"|image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/signer:${{ github.sha }}|g" docker-compose.app.yml
          sed -i "s|image: \"starknet-setup\"|image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/starknet-setup:${{ github.sha }}|g" docker-compose.app.yml

          sed -i "s|image: \"starknet-setup\"|image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/starknet-setup:${{ github.sha }}|g" docker-compose.testnet.yml

      - name: Build test binary
        run: cargo build -p tests --bin tests

      - name: Start integration services (mock)
        run: |
          docker compose -f docker-compose.app-mock.yml up -d
          docker compose -f docker-compose.app-mock.yml ps

      - name: Wait for integration services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          timeout 300 bash -c '
            until docker compose -f docker-compose.app-mock.yml ps --format "table {{.Service}}\t{{.Status}}" | grep -E "(healthy|running)" | wc -l | grep -q "3"; do
              echo "Waiting for mock services to be ready..."
              sleep 10
              docker compose -f docker-compose.app-mock.yml ps
            done
          '

      - name: Run node integration tests
        env:
          GRPC_PORT: 10003
        run: cargo test -p node-tests

      - name: Run signer integration tests
        env:
          GRPC_PORT: 10001
          ROOT_KEY: "${{ env.ROOT_KEY }}"
        run: cargo test -p signer-tests

      - name: Start services
        run: |
          docker compose -f docker-compose.app.yml -f docker-compose.testnet.yml up -d
          docker compose -f docker-compose.app.yml -f docker-compose.testnet.yml ps

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          timeout 300 bash -c '
            until docker compose -f docker-compose.app.yml -f docker-compose.testnet.yml ps --format "table {{.Service}}\t{{.Status}}" | grep -E "(healthy|running)" | wc -l | grep -q "4"; do
              echo "Waiting for all services to be ready..."
              sleep 10
              docker compose -f docker-compose.app.yml -f docker-compose.testnet.yml ps
            done
          '

      - name: Run basic health checks
        run: |
          docker compose -f docker-compose.app.yml -f docker-compose.testnet.yml exec -T db pg_isready -U postgres
          docker compose -f docker-compose.app.yml -f docker-compose.testnet.yml exec -T signer /bin/grpc_health_probe -addr=localhost:10001
          docker compose -f docker-compose.app.yml -f docker-compose.testnet.yml exec -T node /bin/grpc_health_probe -addr=localhost:10003
          curl -f http://localhost:5050/is_alive

      - name: Cleanup CLI wallet DB
        if: always()
        run: rm -rf /home/runner/.local/share

      - name: Run E2E and concurrency tests
        env:
          NODE_URL: http://localhost:10003
          RPC_URL: http://localhost:5050
          PRIVATE_KEY: "0x0000000000000000000000000000000071d7bb07b9a64f6f78ac4c816aff4da9"
          ACCOUNT_ADDRESS: "0x064b48806902a367c8598f4f95c305e8c1a1acba5f082d294a43793113115691"
          WALLET_DB_PATH: /tmp/cli-wallet.sqlite3
        run: |
          ./target/debug/tests e2e
          ./target/debug/tests concurrency

      - name: Show logs on failure
        if: failure()
        run: |
          echo "=== Docker compose logs ==="
          docker compose -f docker-compose.app.yml -f docker-compose.testnet.yml logs
          echo "=== Docker compose ps ==="
          docker compose -f docker-compose.app.yml -f docker-compose.testnet.yml ps
  
      - name: Cleanup
        if: always()
        run: |
          docker compose -f docker-compose.app.yml -f docker-compose.testnet.yml down -v
          docker compose -f docker-compose.app-mock.yml down -v
          docker system prune -f
          rm -rf /home/runner/.local/share
